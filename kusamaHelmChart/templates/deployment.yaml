apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deploymentName }}
  labels:
    chart: "{{ template "chartLabel" . }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.deploymentName }}
  strategy:
{{- if eq .Values.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.strategy.maxSurge }}
      maxUnavailable: {{ .Values.strategy.maxUnavailable }}
{{- end }}
    type: {{ .Values.strategy.type }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.deploymentName }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
{{- if .Values.podAffinity }}
      affinity:
{{ toYaml .Values.podAffinity | indent 8 }}
{{- end }}
      containers:
      - name: {{ .Values.deploymentName }}
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
{{- range $pkey, $pval := .Values.global.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
{{- if (or .Values.deploymentEnvFrom.configMapRefs .Values.deploymentEnvFrom.secretRefs) }}
        envFrom:
{{- range $pkey, $pval := .Values.deploymentEnvFrom.configMapRefs }}
        - configMapRef:
            name: {{ $pkey }}
{{- /* Add any additional attributes (only the "optional" attribute is supported at the time of writing this template */ -}}
            {{- if $pval }}            
{{ toYaml $pval | indent 12 }}
            {{- end }}
{{- end }}
{{- range $pkey, $pval := .Values.deploymentEnvFrom.secretRefs }}
        - secretRef:
            name: {{ $pkey }}
{{- /* Add any additional attributes (only the "optional" attribute is supported at the time of writing this template */ -}}
            {{- if $pval }}            
{{ toYaml $pval | indent 12 }}
            {{- end }}
{{- end }}
{{- end }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
{{- if .Values.livenessProbe }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
{{- end }}
{{- if .Values.readinessProbe }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
{{- end }}
{{- if .Values.resources }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
{{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
